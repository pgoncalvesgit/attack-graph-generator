# This file was made in order to better analyze the vulnerabilities files

# imports
import os
import json

vulnerabilities_path = "/folder/attack-graph-generator/examples-results/TeaStore"

def printj(dictionary):
	print(json.dumps(dictionary, indent = 4));

def get_vulnerability_file_names(path):
	return ["{}/{}".format(path,file) for file in os.listdir(path) if "vulnerabilities.json" in file]

def read_vulnerability_file(file_name):
	return json.load(open(file_name, "r"))

def possible_values_for_key(key_to_address, vulnerabilities_description_list):
	possible_values_list = []
	[possible_values_list.append(vul_desc[0][key_to_address]) for vul_desc in vulnerabilities_description_list if vul_desc[0][key_to_address] not in possible_values_list]
	return possible_values_list

def possible_values_for_various_keys(keys_to_address, vulnerabilities_description_list):
	possible_values_dict = dict()
	[possible_values_dict.update({key_to_address : possible_values_for_key(key_to_address, vulnerabilities_description_list)}) for key_to_address in keys_to_address]
	return possible_values_dict

# Completly useless with filter_positive_list
# Only the negative makes sense
def get_keys_in_vul_desc(vulnerabilities_description_list, filter_positive_list = [], filter_negative_list = []):
	keys_to_identify = []
	if filter_positive_list:
		[keys_to_identify.append(new_key)
			for vul_desc in vulnerabilities_description_list
			for new_key in vul_desc[0].keys()
				if (new_key in filter_positive_list and new_key not in keys_to_identify)]
	else:
		[keys_to_identify.append(new_key)
			for vul_desc in vulnerabilities_description_list
			for new_key in vul_desc[0].keys()
				if new_key not in (filter_negative_list or keys_to_identify)]
	return keys_to_identify

def invert_vul_dict_based_on_key_value(vul_dict, key_to_use, possible_values):
	new_dict = dict()
	[new_dict.update({possible_value : []}) for possible_value in possible_values]
	for vul_id, vul_desc_dict in vul_dict.items():
		vul_desc_dict = vul_desc_dict[0]
		new_dict[vul_desc_dict[key_to_use]].append(vul_id)
	return new_dict

def invert_vul_dict_based_on_many_keys(vul_dict, keys_to_use, possible_values_dict):
	new_dict = dict()
	[new_dict.update({key_to_use : invert_vul_dict_based_on_key_value(vul_dict,key_to_use,possible_values_dict[key_to_use])})
		for key_to_use in keys_to_use]
	return new_dict

# This sorting is probably really bad down horrible really bad
# I just wanted it to work... sorry
# So here it is
sort_default_list = ["NONE", "LOW", "MEDIUM", "HIGH"]
#dict_items([('baseScore', [3.7, 7.5, 6.5, 4.7, 8.8, 5.5, 6.3, 7.8, 5.3, 4.4, 3.1, 5.9, 9.8, 7.4]),
#('attackVector', ['NETWORK', 'LOCAL']), ('userInteraction', ['NONE', 'REQUIRED']), ('attackComplexity', ['HIGH', 'LOW']), ('availabilityImpact', ['NONE', 'HIGH', 'LOW']),
#('privilegesRequired', ['NONE', 'LOW', 'HIGH'])])
def sort_possible_values_list(keys_to_use, possible_values_dict, reverse=False):
	for key_to_use in keys_to_use:
		possible_values_list = possible_values_dict[key_to_use]
		if key_to_use == 'attackVector' or key_to_use == 'userInteraction':
			continue
		elif key_to_use == 'baseScore':
			possible_values_list.sort(reverse = not reverse)
		else:
			possible_values_list.sort(key=lambda adjective: sort_default_list.index(adjective), reverse = reverse)


def sort_vulnerability_key(vul_details, key_to_use, possible_values_list, reverse=False):
	return possible_values_list.index(vul_details[key_to_use])


def sort_vulnerabilities(vul_dict, keys_to_use, possible_values_dict, reverse=False):
	list_to_add = []
	vul_list = []
	
	for key_to_use in keys_to_use:
		possible_values_list = possible_values_dict[key_to_use]
		if key_to_use == 'attackVector':
			continue
		elif key_to_use == 'baseScore':
			possible_values_list.sort(reverse = not reverse)
		for possible_value in possible_values_dict[key_to_use]:
			if isinstance(possible_value, float):
				pass
			else:
				pass
	#print(vul_dict.keys())
	#print(vul_dict["4039783"][0])
	print(list(vul_dict.keys()))
	print(list(vul_dict.keys()).sort(key=lambda vul_key: (sort_vulnerability_key(vul_dict[vul_key][0], keys_to_use[0], possible_values_dict[keys_to_use[0]], reverse = False))))
	vul_list = list(vul_dict.keys()).sort(key=lambda vul_key: (sort_vulnerability_key(vul_dict[vul_key][0], keys_to_use[0], possible_values_dict[keys_to_use[0]], reverse = False)))
	print(vul_list)
	print(vul_dict[vul_list[0]][0])
	print(vul_dict[vul_list[-1]][1])
	return vul_list

# Test get_vulnerability_file_names
#print(get_vulnerability_file_names(vulnerabilities_path))

# Test read_vulnerability_file
#print(list(read_vulnerability_file(get_vulnerability_file_names(vulnerabilities_path)[0])["enrichments"].values())[0][0])
#print()
file_keys = read_vulnerability_file(get_vulnerability_file_names(vulnerabilities_path)[0])
#print("file_keys: {}".format(file_keys.keys()))
#print()
vulnerabilities_keys = file_keys["vulnerabilities"].keys()
#print("vulnerabilities_keys: {}".format(vulnerabilities_keys))
#print()
enchrichements_keys = list(file_keys["enrichments"].values())[0][0].keys()
#enchrichements.list(file_keys["enrichments"].values())[0][0].values()
#print("enrichements_keys: {}".format(enchrichements_keys))
#print()
#print("enrichement_keys_in_vulnerabilities: {}".format([vulnerability for vulnerability in enchrichements_keys if vulnerability in set(vulnerabilities_keys)]))
#print()
#print("enrichement_keys_in_vulnerabilities: {}".format([vulnerability for vulnerability in vulnerabilities_keys if vulnerability in set(enchrichements_keys)]))
vulnerabilities_described_keys = [vulnerability for vulnerability in enchrichements_keys if vulnerability in set(vulnerabilities_keys)]
description_dict = list(file_keys["enrichments"].values())[0][0]
description_list = [description_dict[vulnerability_key] for vulnerability_key in enchrichements_keys]
#print(description_list[0])
attack_vector_list = []
[attack_vector_list.append(vul_desc[0]["attackVector"]) for vul_desc in description_list if vul_desc[0]["attackVector"] not in attack_vector_list]

#print(description.keys())
#print(attack_vector_list)
#print(possible_values_for_key("attackVector", description_list))

filter_negative_list = ["version", "vectorString"]
filter_positive_list = ["attackComplexity", "attackVector", "availabilityImpact", "baseScore", "privilegesRequired", "userInteraction"]
filter_list = filter_positive_list
keys_to_identify = get_keys_in_vul_desc(description_list, filter_positive_list = filter_list)
#print(keys_to_identify)
possible_values_dict = possible_values_for_various_keys(keys_to_identify, description_list)
#print(json.dumps(possible_values_keys, sort_keys=True, indent=4))
#print(possible_values_dict.items())
#print(json.dumps(description_dict, indent=4))
#print(json.dumps(invert_vul_dict_based_on_many_keys(description_dict, keys_to_identify, possible_values_keys), indent=4))
#printj(invert_vul_dict_based_on_many_keys(description_dict, keys_to_identify, possible_values_dict))

#print()

sort_possible_values_list(keys_to_identify, possible_values_dict)

print(sort_vulnerabilities(description_dict, keys_to_identify, possible_values_dict))

