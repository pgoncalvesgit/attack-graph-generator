#!/usr/bin/env python
"""Module responsible for generating vulnerabilites from docker containers."""

import os
import subprocess

from components import topology_parser as top_par
from components import writer

def parse_vulnerabilities(folder):
    """Function that gets the vulnerabilities for each docker container."""

    print("Executing the vulnerability parser...")
    #print(folder)

    list_services = top_par.get_services(folder)
    mapping_image_names = top_par.get_mapping_service_to_image_names(folder)

    old_root_path = os.getcwd()

    if not os.path.exists(os.path.join(old_root_path, "examples-results")):
        os.makedirs(os.path.join(old_root_path, "examples-results"), mode=0o777)


    if not os.path.exists(os.path.join(old_root_path, "examples-results", folder)):
        os.makedirs(os.path.join(old_root_path, "examples-results", folder), mode=0o777)

    os.chdir(os.path.join(os.getcwd(), folder))

    # Build the images that are specified in docker-compose.yml
    #subprocess.call(["docker-compose",
    #                 "build"])

    # Start clair, clairctl and postgres
    clairctl_home = os.path.join("/usr",
                                 "local",
                                 "go",
                                 "src",
                                 "github.com",
                                 "jgsqware",
                                 "clairctl")

    #os.chdir(clairctl_home)

    #subprocess.call(["docker-compose",
    #                 "up",
    #                 "-d"])

    #print("Services: {}".format(list_services))

    # Doing the analyzis and make reports files.
    for service in list_services:

        image = mapping_image_names[service]['image_name']
        file_name = mapping_image_names[service]['directory_name']

        #print("Pushing the image "+image)
        #subprocess.call(["/folder/clair/clairctl-linux-amd64",
        #                 "report",
        #                 image], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        print("Testing {} service image".format(image))

        print("Analyzing the image "+image)
        result_analyze = subprocess.run(["/folder/clair/clairctl-linux-amd64",
                         "manifest",
                         image], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


        print("Making report for the image "+image)
        result_report = subprocess.run(["/folder/clair/clairctl-linux-amd64",
                         "report",
                         "-o",
                         "json",
                         image], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        #image = image.replace("/","_")
        report_path = os.path.join(clairctl_home,
                           "docker-compose-data",
                           "clairctl-reports",
                           "analysis-"+file_name+"-latest.json")

        with open(report_path, 'w') as fp:
            fp.write(result_report.stdout.decode('utf-8'))

        writer.copy_vulnerability_file(clairctl_home, file_name, old_root_path, folder)

    os.chdir(old_root_path)

    print("Vulnerability parser executed.")
